# Description:
#  Starting with curated HIPC data, prepare Dashboard submission templates.
#  Types currently explicitly supported: Gene, Cell type frequency.
#  * Perform gene symbol updates to conform to HGNC.
#    * Fix up temporary term problems pending e.g. ontology updates
#    * When exposure material is an influenza vaccine,
#        substitute the actual virus components for the listed vaccine year
#        into the target pathogen field.
#    * Substitute in corrected cell type and cell type details from external sheet.
#    * Retrieve publication title and abstract etc. based on PMID
#    * Create individual submission files by publication
#    * Create CV-per-template file for set of submissions
#
# Input files (must be in current directory):
#   * Dashboard spreadsheet e.g. "HIPC Dashboard 2020-10-22.xlsx"
#     downloaded from Google Drive, use actual download date in filename.
#   * "vaccine_years.xlsx" - maps vaccine season year to vaccine viral components
#   * "manual_gene_symbol_corrections.txt" - maps invalid symbols  to known valid sybmols
#   * "cell_type_frequency-response_components_mapping.xlsx" - corrections to exposure_material
#        terms for cell type frequency sheet.  These corrections will in the end be added
#        directly into the HIPC Dashboard spreadsheet.
#
# Output files:
#   * Submission file for each signature
#   * Files containing the list of response_components for each signature.
#       One file has only the HGNC symbols, the other has all original symbols.
#   * CV-per-template file for all signatures of a type (gene, cell-type)
#   * Numerous log files with details of each stage of processing.
#
# BiocManager::install("xlsx")
# BiocManager::install("splitstackshape")
# BiocManager::install("HGNChelper")
# BiocManager::install("limma")
# BiocManager::install("uniqtag")
# BiocManager::install("org.Hs.eg.db")
# BiocManager::install("easyPubMed")
# BiocManager::install("data.table")
# BiocManager::install("ggplot2")
# BiocManager::install("xml2")
# BiocManager::install("annotate")
# BiocManager::install("stringi")
# BiocManager::install("pracma")
library(xlsx)
library(splitstackshape)  # for cSplit()
library(uniqtag)          # for cumcount()
# Note that rbindlist() tends to return a data.table with a data.frame, which causes
# no end of problems if not cast back to just a data.frame.
library(data.table)       # for rbindlist()
library(ggplot2)
library(stringi)
source("hipc_utils.R")
source("gene_routines.R")
source("vaccines_pathogens.R")
source("pmid_to_title_easy.R")
source("write_submissions.R")
source("msigdb_submission_utils.R")
source("find_unique.R")
#####<<<< START HERE >>>>#####
##### Choose a sheet type (from "HIPC Dashboard.xlsx") #####
# Available sheet_type values are "GENE", "CELLTYPE_FREQUENCY"
sheet_type <- "GENE"
# For the moment, assume executing interactively from the ./src directory
source_data_dir <- "../source_data"
submission_dir  <- "../submissions"
logdir          <- "../logfiles"
dashboard_in_xlsx    <- "HIPC Dashboard.xlsx"
vaccine_xlsx         <- "vaccine_years.xlsx"
ctf_fixes_xlsx       <- "cell_type_frequency-response_components_mapping.xlsx"
manual_gene_corrections_file <- "manual_gene_symbol_corrections.txt"
# symbols that have no representation in NCBI
ncbi_no_symbol <- c("BACH1-IT1")  # BACH1 Intronic Transcript 1 (uncategorized)
# NCBI not using current HGNC symbol
ncbi_fixes <- data.frame(ncbi = "TRNS1", hgnc = "MT-TS1")
##### Set runtime parameters #####
# Download publication references again using PMIDs,
#   set to FALSE to reuse existing file
#   Run this every time new publications are added to the spreadsheet,
#   for each response_component type.
RENEW_PMIDS             <- TRUE
## Please update gene files before each release
## These files will be overwritten if update is requested
# Download a new copy of NCBI gene info file
DOWNLOAD_NEW_NCBI_GENES <- TRUE
# Download a new copy of the official HGNC gene mapping
DOWNLOAD_NEW_HGNC       <- TRUE
# Generate a new copy of the mSigDB submission file
CREATE_MSIGDB           <- FALSE
# In the observation summary, do not display pathogens if the vaccine already
# uses the pathogen in its name:
# VO_0004810: 2011-2012 trivalent inactivated vaccine (A/California/7/09 (H1N1,),
#     A/Perth /16/2009 (H3N2), and B/Brisbane/60/2008).
# VO_0004899: 2012-2013 seasonal trivalent inactivated influenza vaccine
#     (A/California/7/2009 (H1N1), A/Victoria/361/2011 (H3N2),
#     and B/Wisconsin/1/2010)
# VO_0004903: Inactivated monovalent influenza A/H5N1
#     (3.75 mcg hemagglutinin [HA] A/Indonesia/05/2005) split-virus (SV) vaccine (Sanofi)
vaccine_VO_has_pathogens <- c("VO_0004810", "VO_0004899", "VO_0004903")
##############################
##### Initial data setup #####
##############################
if(!dir.exists(source_data_dir)) {
stop(paste("source data directory not found:", source_data_dir))
}
# create log files directory
if(!dir.exists(logdir)) {
dir.create(logdir)
}
# create submission files directory
if(!dir.exists(submission_dir)) {
dir.create(submission_dir)
}
# Note - if running interactively, will exit script in submission_dir
setwd(submission_dir)
if (sheet_type == "GENE" && DOWNLOAD_NEW_NCBI_GENES) {
if(!update_ncbi_homo_sapiens_gene_info(source_data_dir)) {
print("update of NCBI gene info file failed")
}
}
options(stringsAsFactors = FALSE)  # unfortunately doesn't help with cSplit output
summary_df <- data.frame()  # initialize summary log
##### Set up file and template name components #####
# change sheet name spaces to underscores
if (sheet_type == "GENE") {
sheet_file     <- "HIPC Dashboard - Gene Expression.tsv"
sheet_name     <- "Gene Expression"
sheet_name_out <- "gene_expression"
base_filename  <- "gene_expression"
template_name  <- "hipc_gene"
project        <- "Gene expression response to vaccine exposure"
} else if (sheet_type == "CELLTYPE_FREQUENCY") {
sheet_file     <- "HIPC Dashboard - Cell type Frequency.tsv"
sheet_name     <- "Cell type Frequency"
sheet_name_out <- "cell_type_frequency"
base_filename  <- "cell_type"
template_name  <- "hipc_ctf"
cell_mapping_sheet_name   <- "HIPC_Dashboard-Cell_type_Freque"
project        <- "Immune cell-type frequency response to vaccine exposure"
} else {
stop("unknown sheet type")
}
# for joint summary, list all possible values of base_filename from above
all_response_types <- c("gene_expression", "cell_type")
pmid_file <- paste(source_data_dir,
paste(sheet_name_out, "titles_and_dates_df.RData", sep = "_"),
sep = "/")
insub <- read.delim(file =  paste(source_data_dir, sheet_file, sep = "/"),
strip.white = TRUE,
stringsAsFactors = FALSE)
setwd("~/GitHub/hipc-dashboard-pipeline/src")
# File name: generate_HIPC_submissions.R
# Author: Kenneth C. Smith
# Description:
#  Starting with curated HIPC data, prepare Dashboard submission templates.
#  Types currently explicitly supported: Gene, Cell type frequency.
#  * Perform gene symbol updates to conform to HGNC.
#    * Fix up temporary term problems pending e.g. ontology updates
#    * When exposure material is an influenza vaccine,
#        substitute the actual virus components for the listed vaccine year
#        into the target pathogen field.
#    * Substitute in corrected cell type and cell type details from external sheet.
#    * Retrieve publication title and abstract etc. based on PMID
#    * Create individual submission files by publication
#    * Create CV-per-template file for set of submissions
#
# Input files (must be in current directory):
#   * Dashboard spreadsheet e.g. "HIPC Dashboard 2020-10-22.xlsx"
#     downloaded from Google Drive, use actual download date in filename.
#   * "vaccine_years.xlsx" - maps vaccine season year to vaccine viral components
#   * "manual_gene_symbol_corrections.txt" - maps invalid symbols  to known valid sybmols
#   * "cell_type_frequency-response_components_mapping.xlsx" - corrections to exposure_material
#        terms for cell type frequency sheet.  These corrections will in the end be added
#        directly into the HIPC Dashboard spreadsheet.
#
# Output files:
#   * Submission file for each signature
#   * Files containing the list of response_components for each signature.
#       One file has only the HGNC symbols, the other has all original symbols.
#   * CV-per-template file for all signatures of a type (gene, cell-type)
#   * Numerous log files with details of each stage of processing.
#
# BiocManager::install("xlsx")
# BiocManager::install("splitstackshape")
# BiocManager::install("HGNChelper")
# BiocManager::install("limma")
# BiocManager::install("uniqtag")
# BiocManager::install("org.Hs.eg.db")
# BiocManager::install("easyPubMed")
# BiocManager::install("data.table")
# BiocManager::install("ggplot2")
# BiocManager::install("xml2")
# BiocManager::install("annotate")
# BiocManager::install("stringi")
# BiocManager::install("pracma")
library(xlsx)
library(splitstackshape)  # for cSplit()
library(uniqtag)          # for cumcount()
# Note that rbindlist() tends to return a data.table with a data.frame, which causes
# no end of problems if not cast back to just a data.frame.
library(data.table)       # for rbindlist()
library(ggplot2)
library(stringi)
source("hipc_utils.R")
source("gene_routines.R")
source("vaccines_pathogens.R")
source("pmid_to_title_easy.R")
source("write_submissions.R")
source("msigdb_submission_utils.R")
source("find_unique.R")
#####<<<< START HERE >>>>#####
##### Choose a sheet type (from "HIPC Dashboard.xlsx") #####
# Available sheet_type values are "GENE", "CELLTYPE_FREQUENCY"
sheet_type <- "GENE"
# For the moment, assume executing interactively from the ./src directory
source_data_dir <- "../source_data"
submission_dir  <- "../submissions"
logdir          <- "../logfiles"
dashboard_in_xlsx    <- "HIPC Dashboard.xlsx"
vaccine_xlsx         <- "vaccine_years.xlsx"
ctf_fixes_xlsx       <- "cell_type_frequency-response_components_mapping.xlsx"
manual_gene_corrections_file <- "manual_gene_symbol_corrections.txt"
# symbols that have no representation in NCBI
ncbi_no_symbol <- c("BACH1-IT1")  # BACH1 Intronic Transcript 1 (uncategorized)
# NCBI not using current HGNC symbol
ncbi_fixes <- data.frame(ncbi = "TRNS1", hgnc = "MT-TS1")
##### Set runtime parameters #####
# Download publication references again using PMIDs,
#   set to FALSE to reuse existing file
#   Run this every time new publications are added to the spreadsheet,
#   for each response_component type.
RENEW_PMIDS             <- TRUE
## Please update gene files before each release
## These files will be overwritten if update is requested
# Download a new copy of NCBI gene info file
DOWNLOAD_NEW_NCBI_GENES <- TRUE
# Download a new copy of the official HGNC gene mapping
DOWNLOAD_NEW_HGNC       <- TRUE
# Generate a new copy of the mSigDB submission file
CREATE_MSIGDB           <- FALSE
# In the observation summary, do not display pathogens if the vaccine already
# uses the pathogen in its name:
# VO_0004810: 2011-2012 trivalent inactivated vaccine (A/California/7/09 (H1N1,),
#     A/Perth /16/2009 (H3N2), and B/Brisbane/60/2008).
# VO_0004899: 2012-2013 seasonal trivalent inactivated influenza vaccine
#     (A/California/7/2009 (H1N1), A/Victoria/361/2011 (H3N2),
#     and B/Wisconsin/1/2010)
# VO_0004903: Inactivated monovalent influenza A/H5N1
#     (3.75 mcg hemagglutinin [HA] A/Indonesia/05/2005) split-virus (SV) vaccine (Sanofi)
vaccine_VO_has_pathogens <- c("VO_0004810", "VO_0004899", "VO_0004903")
##############################
##### Initial data setup #####
##############################
if(!dir.exists(source_data_dir)) {
stop(paste("source data directory not found:", source_data_dir))
}
# create log files directory
if(!dir.exists(logdir)) {
dir.create(logdir)
}
# create submission files directory
if(!dir.exists(submission_dir)) {
dir.create(submission_dir)
}
# Note - if running interactively, will exit script in submission_dir
setwd(submission_dir)
if (sheet_type == "GENE" && DOWNLOAD_NEW_NCBI_GENES) {
if(!update_ncbi_homo_sapiens_gene_info(source_data_dir)) {
print("update of NCBI gene info file failed")
}
}
options(stringsAsFactors = FALSE)  # unfortunately doesn't help with cSplit output
summary_df <- data.frame()  # initialize summary log
##### Set up file and template name components #####
# change sheet name spaces to underscores
if (sheet_type == "GENE") {
sheet_file     <- "HIPC Dashboard - Gene Expression.tsv"
sheet_name     <- "Gene Expression"
sheet_name_out <- "gene_expression"
base_filename  <- "gene_expression"
template_name  <- "hipc_gene"
project        <- "Gene expression response to vaccine exposure"
} else if (sheet_type == "CELLTYPE_FREQUENCY") {
sheet_file     <- "HIPC Dashboard - Cell type Frequency.tsv"
sheet_name     <- "Cell type Frequency"
sheet_name_out <- "cell_type_frequency"
base_filename  <- "cell_type"
template_name  <- "hipc_ctf"
cell_mapping_sheet_name   <- "HIPC_Dashboard-Cell_type_Freque"
project        <- "Immune cell-type frequency response to vaccine exposure"
} else {
stop("unknown sheet type")
}
# for joint summary, list all possible values of base_filename from above
all_response_types <- c("gene_expression", "cell_type")
pmid_file <- paste(source_data_dir,
paste(sheet_name_out, "titles_and_dates_df.RData", sep = "_"),
sep = "/")
insub <- read.delim(file =  paste(source_data_dir, sheet_file, sep = "/"),
strip.white = TRUE,
stringsAsFactors = FALSE)
source("gene_routines.R")
# File name: generate_HIPC_submissions.R
# Author: Kenneth C. Smith
# Description:
#  Starting with curated HIPC data, prepare Dashboard submission templates.
#  Types currently explicitly supported: Gene, Cell type frequency.
#  * Perform gene symbol updates to conform to HGNC.
#    * Fix up temporary term problems pending e.g. ontology updates
#    * When exposure material is an influenza vaccine,
#        substitute the actual virus components for the listed vaccine year
#        into the target pathogen field.
#    * Substitute in corrected cell type and cell type details from external sheet.
#    * Retrieve publication title and abstract etc. based on PMID
#    * Create individual submission files by publication
#    * Create CV-per-template file for set of submissions
#
# Input files (must be in current directory):
#   * Dashboard spreadsheet e.g. "HIPC Dashboard 2020-10-22.xlsx"
#     downloaded from Google Drive, use actual download date in filename.
#   * "vaccine_years.xlsx" - maps vaccine season year to vaccine viral components
#   * "manual_gene_symbol_corrections.txt" - maps invalid symbols  to known valid sybmols
#   * "cell_type_frequency-response_components_mapping.xlsx" - corrections to exposure_material
#        terms for cell type frequency sheet.  These corrections will in the end be added
#        directly into the HIPC Dashboard spreadsheet.
#
# Output files:
#   * Submission file for each signature
#   * Files containing the list of response_components for each signature.
#       One file has only the HGNC symbols, the other has all original symbols.
#   * CV-per-template file for all signatures of a type (gene, cell-type)
#   * Numerous log files with details of each stage of processing.
#
# BiocManager::install("xlsx")
# BiocManager::install("splitstackshape")
# BiocManager::install("HGNChelper")
# BiocManager::install("limma")
# BiocManager::install("uniqtag")
# BiocManager::install("org.Hs.eg.db")
# BiocManager::install("easyPubMed")
# BiocManager::install("data.table")
# BiocManager::install("ggplot2")
# BiocManager::install("xml2")
# BiocManager::install("annotate")
# BiocManager::install("stringi")
# BiocManager::install("pracma")
library(xlsx)
library(splitstackshape)  # for cSplit()
library(uniqtag)          # for cumcount()
# Note that rbindlist() tends to return a data.table with a data.frame, which causes
# no end of problems if not cast back to just a data.frame.
library(data.table)       # for rbindlist()
library(ggplot2)
library(stringi)
source("hipc_utils.R")
source("gene_routines.R")
source("vaccines_pathogens.R")
source("pmid_to_title_easy.R")
source("write_submissions.R")
source("msigdb_submission_utils.R")
source("find_unique.R")
setwd("~/GitHub/hipc-dashboard-pipeline/src")
# File name: generate_HIPC_submissions.R
# Author: Kenneth C. Smith
# Description:
#  Starting with curated HIPC data, prepare Dashboard submission templates.
#  Types currently explicitly supported: Gene, Cell type frequency.
#  * Perform gene symbol updates to conform to HGNC.
#    * Fix up temporary term problems pending e.g. ontology updates
#    * When exposure material is an influenza vaccine,
#        substitute the actual virus components for the listed vaccine year
#        into the target pathogen field.
#    * Substitute in corrected cell type and cell type details from external sheet.
#    * Retrieve publication title and abstract etc. based on PMID
#    * Create individual submission files by publication
#    * Create CV-per-template file for set of submissions
#
# Input files (must be in current directory):
#   * Dashboard spreadsheet e.g. "HIPC Dashboard 2020-10-22.xlsx"
#     downloaded from Google Drive, use actual download date in filename.
#   * "vaccine_years.xlsx" - maps vaccine season year to vaccine viral components
#   * "manual_gene_symbol_corrections.txt" - maps invalid symbols  to known valid sybmols
#   * "cell_type_frequency-response_components_mapping.xlsx" - corrections to exposure_material
#        terms for cell type frequency sheet.  These corrections will in the end be added
#        directly into the HIPC Dashboard spreadsheet.
#
# Output files:
#   * Submission file for each signature
#   * Files containing the list of response_components for each signature.
#       One file has only the HGNC symbols, the other has all original symbols.
#   * CV-per-template file for all signatures of a type (gene, cell-type)
#   * Numerous log files with details of each stage of processing.
#
# BiocManager::install("xlsx")
# BiocManager::install("splitstackshape")
# BiocManager::install("HGNChelper")
# BiocManager::install("limma")
# BiocManager::install("uniqtag")
# BiocManager::install("org.Hs.eg.db")
# BiocManager::install("easyPubMed")
# BiocManager::install("data.table")
# BiocManager::install("ggplot2")
# BiocManager::install("xml2")
# BiocManager::install("annotate")
# BiocManager::install("stringi")
# BiocManager::install("pracma")
library(xlsx)
library(splitstackshape)  # for cSplit()
library(uniqtag)          # for cumcount()
# Note that rbindlist() tends to return a data.table with a data.frame, which causes
# no end of problems if not cast back to just a data.frame.
library(data.table)       # for rbindlist()
library(ggplot2)
library(stringi)
source("hipc_utils.R")
source("gene_routines.R")
source("vaccines_pathogens.R")
source("pmid_to_title_easy.R")
source("write_submissions.R")
source("msigdb_submission_utils.R")
source("find_unique.R")
#####<<<< START HERE >>>>#####
##### Choose a sheet type (from "HIPC Dashboard.xlsx") #####
# Available sheet_type values are "GENE", "CELLTYPE_FREQUENCY"
sheet_type <- "GENE"
# For the moment, assume executing interactively from the ./src directory
source_data_dir <- "../source_data"
submission_dir  <- "../submissions"
logdir          <- "../logfiles"
dashboard_in_xlsx    <- "HIPC Dashboard.xlsx"
vaccine_xlsx         <- "vaccine_years.xlsx"
ctf_fixes_xlsx       <- "cell_type_frequency-response_components_mapping.xlsx"
manual_gene_corrections_file <- "manual_gene_symbol_corrections.txt"
# symbols that have no representation in NCBI
ncbi_no_symbol <- c("BACH1-IT1")  # BACH1 Intronic Transcript 1 (uncategorized)
# NCBI not using current HGNC symbol
ncbi_fixes <- data.frame(ncbi = "TRNS1", hgnc = "MT-TS1")
##### Set runtime parameters #####
# Download publication references again using PMIDs,
#   set to FALSE to reuse existing file
#   Run this every time new publications are added to the spreadsheet,
#   for each response_component type.
RENEW_PMIDS             <- TRUE
## Please update gene files before each release
## These files will be overwritten if update is requested
# Download a new copy of NCBI gene info file
DOWNLOAD_NEW_NCBI_GENES <- TRUE
# Download a new copy of the official HGNC gene mapping
DOWNLOAD_NEW_HGNC       <- TRUE
# Generate a new copy of the mSigDB submission file
CREATE_MSIGDB           <- FALSE
# In the observation summary, do not display pathogens if the vaccine already
# uses the pathogen in its name:
# VO_0004810: 2011-2012 trivalent inactivated vaccine (A/California/7/09 (H1N1,),
#     A/Perth /16/2009 (H3N2), and B/Brisbane/60/2008).
# VO_0004899: 2012-2013 seasonal trivalent inactivated influenza vaccine
#     (A/California/7/2009 (H1N1), A/Victoria/361/2011 (H3N2),
#     and B/Wisconsin/1/2010)
# VO_0004903: Inactivated monovalent influenza A/H5N1
#     (3.75 mcg hemagglutinin [HA] A/Indonesia/05/2005) split-virus (SV) vaccine (Sanofi)
vaccine_VO_has_pathogens <- c("VO_0004810", "VO_0004899", "VO_0004903")
##############################
##### Initial data setup #####
##############################
if(!dir.exists(source_data_dir)) {
stop(paste("source data directory not found:", source_data_dir))
}
# create log files directory
if(!dir.exists(logdir)) {
dir.create(logdir)
}
# create submission files directory
if(!dir.exists(submission_dir)) {
dir.create(submission_dir)
}
# Note - if running interactively, will exit script in submission_dir
setwd(submission_dir)
if (sheet_type == "GENE" && DOWNLOAD_NEW_NCBI_GENES) {
if(!update_ncbi_homo_sapiens_gene_info(source_data_dir)) {
print("update of NCBI gene info file failed")
}
}
options(stringsAsFactors = FALSE)  # unfortunately doesn't help with cSplit output
summary_df <- data.frame()  # initialize summary log
##### Set up file and template name components #####
# change sheet name spaces to underscores
if (sheet_type == "GENE") {
sheet_file     <- "HIPC Dashboard - Gene Expression.tsv"
sheet_name     <- "Gene Expression"
sheet_name_out <- "gene_expression"
base_filename  <- "gene_expression"
template_name  <- "hipc_gene"
project        <- "Gene expression response to vaccine exposure"
} else if (sheet_type == "CELLTYPE_FREQUENCY") {
sheet_file     <- "HIPC Dashboard - Cell type Frequency.tsv"
sheet_name     <- "Cell type Frequency"
sheet_name_out <- "cell_type_frequency"
base_filename  <- "cell_type"
template_name  <- "hipc_ctf"
cell_mapping_sheet_name   <- "HIPC_Dashboard-Cell_type_Freque"
project        <- "Immune cell-type frequency response to vaccine exposure"
} else {
stop("unknown sheet type")
}
# for joint summary, list all possible values of base_filename from above
all_response_types <- c("gene_expression", "cell_type")
pmid_file <- paste(source_data_dir,
paste(sheet_name_out, "titles_and_dates_df.RData", sep = "_"),
sep = "/")
insub <- read.delim(file =  paste(source_data_dir, sheet_file, sep = "/"),
strip.white = TRUE,
stringsAsFactors = FALSE)
BiocManager::install("org.Hs.eg.db")
BiocManager::install(version = '3.13')
