Cases_without_ICD_code    = result[[i]][3],
Controls_with_ICD_code    = result[[i]][4],
Controls_without_ICD_code = result[[i]][5],
stringsAsFactors = FALSE)
}
fisherDFrb <- rbindlist(fisherDF)
head(fisherDFrb)
fisher.test[ICD_code == "705.83", ]
fisherDFrb[ICD_code == "705.83", ]
fisherDF <- rbindlist(fisherDF)
result <- lapply(icdUniq[30000:length(icdUniq)], getMatrix)
runFisherExact <- function(counts) {
m <- matrix(as.integer(c(counts[2], counts[4], counts[3], counts[5])),
nrow = 2,
dimnames = list(c("case", "control"), c("code", "nocode")))
return(fisher.test(m))
}
fet <- lapply(result, runFisherExact)
pv <- sapply(fet, function(x) x$p.value)
fdr <- p.adjust(pv, method = "fdr")
ALTERNATIVE <- TRUE
if (ALTERNATIVE) {
library(data.table)
fisherDF <- vector(mode = "list", length = length(fet))
for (i in 1:length(fet)) {
if(i %% 10000 == 0) print(i)
fisherDF[[i]] <-  data.frame(ICD_code   = result[[i]][1],
FET_pval   = fet[[i]]$p.value,
FDR        = fdr[i],
Odds_ratio = as.character(fet[[i]]$estimate),
CI_95_min  = as.character(fet[[i]]$conf.int[[1]]),
CI_95_max  = as.character(fet[[i]]$conf.int[[2]]),
Cases_with_ICD_code       = result[[i]][2],
Cases_without_ICD_code    = result[[i]][3],
Controls_with_ICD_code    = result[[i]][4],
Controls_without_ICD_code = result[[i]][5],
stringsAsFactors = FALSE)
}
fisherDF <- rbindlist(fisherDF)
}
subset(fisherDF, ICD_code == "S52.552A")
head(fisherDF)
# Author: Kenneth C. Smith
# Date: December 23, 2019
#
# Input: a file containing 4 columns:
#    unlabeled (row number)
#    "SUBJECT_ID"  such as "16214497"
#    "ICD_CODE" such as "367.4"
#    "Case_status" can be "1" (case), "0" (control), or "." (not specified)
#    We ignore rows with a case_status of "."
# Procedure: The input data file contains only observations which associate a subject with a given code.
#            Counts of subjects not having particular codes, and their case/control status,
#            are reconstructed from the available data by creating sets of all subjects,
#            their case/control status, and all codes.
#            After the complete contingency tables for each code are reconstructed, FET is run
#            followed by FDR/BH p-value correction.
#
# Output: The data is sorted by FDR and written out to an Excel file.
library(xlsx)
inputData <- "//isilon.c2b2.columbia.edu/ifs/archive/shares/af_lab/Christiano/Lynn/2019/ICD_codes/data/ICD_code_subject_data.csv"
df <- read.csv(inputData, stringsAsFactors = FALSE)
nrow(df)  # 30,632,375
colnames(df)  # [1] "X"           "SUBJECT_ID"  "ICD_CODE"    "Case_status"
df <- df[df$Case_status != ".", ]
nrow(df)  # 12,546,582
df <- df[-1]
colnames(df)  # [1] "SUBJECT_ID"  "ICD_CODE"    "Case_status"
dup <- duplicated(df)
sum(dup) # 8,113,436
df <- df[!dup, ]
nrow(df) # 4,433,146
icdUniq <- unique(df$ICD_CODE)
length(icdUniq)  # 39,430
head(icdUniq)
subjUniq <- unique(df$SUBJECT_ID)
length(subjUniq)  # 68,597
subjStatus <- df[-2]
subjStatus <- unique(subjStatus)
nrow(subjStatus)
# Test that the number of unique combinations of subject + case/control status is the same as the number of unique subjects
# That is, each subject always has the same status
totalSubjects <- length(subjUniq)
nrow(subjStatus) == totalSubjects  # True
head(subjStatus)
s1 <- sum(subjStatus$Case_status == 1)  # 668
s2 <- sum(subjStatus$Case_status == 0)  # 67,929
s1 + s2 == nrow(subjStatus)  # Are all values 1 or 0?  Yes
getMatrix <- function(code) {
#code <- "S52.552A"  # for testing
w <- which(df[, "ICD_CODE"] == code)
N1 <- sum(df[w, "Case_status"] == 1)  # Case
N3 <- length(w) - N1                  # Control
noCode <- !(subjStatus$SUBJECT_ID %in% df[w, "SUBJECT_ID"])
N2 <- sum(subjStatus[noCode, "Case_status"] == 1)  # Case
N4 <- sum(noCode) - N2                             # Control
if (N1 + N2 + N3 + N4 != totalSubjects) {
stop(paste("At code ", code, ": sum of terms", N1+N2+N3+N4, "doesn't equal total", totalSubjects))
}
return(c(code, N1, N2, N3, N4))
}
result <- lapply(icdUniq[1:length(icdUniq)], getMatrix)
# result <- lapply("S52.552A", getMatrix)
runFisherExact <- function(counts) {
m <- matrix(as.integer(c(counts[2], counts[4], counts[3], counts[5])),
nrow = 2,
dimnames = list(c("case", "control"), c("code", "nocode")))
return(fisher.test(m))
}
fet <- lapply(result, runFisherExact)
# attr(fr[[i]]$conf.int, "conf.level")  # just for reference here.
# extract a vector of p-values
pv <- sapply(fet, function(x) x$p.value)
fdr <- p.adjust(pv, method = "fdr")
# because we are accessing both "result" and "fet", need to use index rather than apply()
################################
ALTERNATIVE <- TRUE
if (ALTERNATIVE) {
library(data.table)
fisherDF <- vector(mode = "list", length = length(fet))
for (i in 1:length(fet)) {
if(i %% 10000 == 0) print(i)
fisherDF[[i]] <-  data.frame(ICD_code   = result[[i]][1],
FET_pval   = fet[[i]]$p.value,
FDR        = fdr[i],
Odds_ratio = as.character(fet[[i]]$estimate),
CI_95_min  = as.character(fet[[i]]$conf.int[[1]]),
CI_95_max  = as.character(fet[[i]]$conf.int[[2]]),
Cases_with_ICD_code       = result[[i]][2],
Cases_without_ICD_code    = result[[i]][3],
Controls_with_ICD_code    = result[[i]][4],
Controls_without_ICD_code = result[[i]][5],
stringsAsFactors = FALSE)
}
fisherDF <- rbindlist(fisherDF)
} else {  # brute force way
fisherDF <- data.frame()
for (i in 1:length(fet)) {
if(i %% 10000 == 0) print(i)
fisherDF <- rbind(fisherDF,
data.frame(ICD_code   = result[[i]][1],
FET_pval   = fet[[i]]$p.value,
FDR        = fdr[i],
Odds_ratio = as.character(fet[[i]]$estimate),
Odds_ratio_raw = fet[[i]]$estimate,
CI_95_min  = fet[[i]]$conf.int[[1]],
CI_95_max  = fet[[i]]$conf.int[[2]],
Cases_with_ICD_code       = result[[i]][2],
Cases_without_ICD_code    = result[[i]][3],
Controls_with_ICD_code    = result[[i]][4],
Controls_without_ICD_code = result[[i]][5],
stringsAsFactors = FALSE),
make.row.names = FALSE)
}
}
################################
fisherDFord <- fisherDF[order(fisherDF$FDR), ]
head(fisherDFord)
save(result, fisherDF, file = "fisher_results_v3.RData")
write.xlsx(fisherDFord, file = "fisher_results_v3.xlsx", row.names = FALSE)
save(result, fisherDF, file = "fisher_results.RData")
write.xlsx(fisherDFord, file = "fisher_results.xlsx", row.names = FALSE)
sessionInfoFile <- "icd_codes_fet_sessionInfo.txt"
writeLines(capture.output(sessionInfo()), sessionInfoFile)
library(xlsx)
library(data.table)
inputData <- "//isilon.c2b2.columbia.edu/ifs/archive/shares/af_lab/Christiano/Lynn/2019/ICD_codes/data/ICD_code_subject_data.csv"
sessionInfoFile <- "icd_codes_fet_sessionInfo.txt"
library(xlsx)
library(data.table)
inputData <- "//isilon.c2b2.columbia.edu/ifs/archive/shares/af_lab/Christiano/Lynn/2019/ICD_codes/data/ICD_code_subject_data.csv"
sessionInfoFile <- "icd_codes_fet_sessionInfo.txt"
df <- read.csv(inputData, stringsAsFactors = FALSE)
nrow(df)  # 30,632,375
colnames(df)  # [1] "X"           "SUBJECT_ID"  "ICD_CODE"    "Case_status"
sum(df$Case_status == 1)
sum(df$Case_status == 0) # 368229
sum(df$Case_status == ".") # 12178353
one <- sum(df$Case_status == 1) # 368229
zero <- sum(df$Case_status == 0) # 12178353
dot <- sum(df$Case_status == ".") # 18085793
df[df$Case_status == ".", "Case_status"] <- 0
oneD <- sum(df$Case_status == 1) # 368229
zeroD <- sum(df$Case_status == 0) # 12178353
dotD <- sum(df$Case_status == ".") # 18085793
oneD
zeroD
dotD
nrow(df)  # 12,546,582
zeroD == one + zero
zeroD == zero + dot
zeroD
df <- df[-1]
colnames(df)  # [1] "SUBJECT_ID"  "ICD_CODE"    "Case_status"
dup <- duplicated(df)
sum(dup) # 8,113,436
df <- df[!dup, ]
nrow(df) # 4,433,146
icdUniq <- unique(df$ICD_CODE)
length(icdUniq)  # 39,430
head(icdUniq)
subjUniq <- unique(df$SUBJECT_ID)
length(subjUniq)  # 68,597
subjStatus <- df[-2]
subjStatus <- unique(subjStatus)
nrow(subjStatus)
# Test that the number of unique combinations of subject + case/control status is the same as the number of unique subjects
# That is, each subject always has the same status
totalSubjects <- length(subjUniq)
nrow(subjStatus) == totalSubjects  # True
head(subjStatus)
s1 <- sum(subjStatus$Case_status == 1)  # 668
s2 <- sum(subjStatus$Case_status == 0)  # 67,929
s1 + s2 == nrow(subjStatus)  # Are all values 1 or 0?  Yes
s1
s2
getMatrix <- function(code) {
#code <- "S52.552A"  # for testing
w <- which(df[, "ICD_CODE"] == code)
N1 <- sum(df[w, "Case_status"] == 1)  # Case
N3 <- length(w) - N1                  # Control
noCode <- !(subjStatus$SUBJECT_ID %in% df[w, "SUBJECT_ID"])
N2 <- sum(subjStatus[noCode, "Case_status"] == 1)  # Case
N4 <- sum(noCode) - N2                             # Control
if (N1 + N2 + N3 + N4 != totalSubjects) {
stop(paste("At code ", code, ": sum of terms", N1+N2+N3+N4, "doesn't equal total", totalSubjects))
}
return(c(code, N1, N2, N3, N4))
}
result <- lapply(icdUniq[1:length(icdUniq)], getMatrix)
runFisherExact <- function(counts) {
m <- matrix(as.integer(c(counts[2], counts[4], counts[3], counts[5])),
nrow = 2,
dimnames = list(c("case", "control"), c("code", "nocode")))
return(fisher.test(m))
}
fet <- lapply(result, runFisherExact)
# attr(fr[[i]]$conf.int, "conf.level")  # just for reference here.
# extract a vector of p-values
pv <- sapply(fet, function(x) x$p.value)
fdr <- p.adjust(pv, method = "fdr")
fisherDF <- vector(mode = "list", length = length(fet))
for (i in 1:length(fet)) {
if(i %% 10000 == 0) print(i)
fisherDF[[i]] <-  data.frame(ICD_code   = result[[i]][1],
FET_pval   = fet[[i]]$p.value,
FDR        = fdr[i],
Odds_ratio = as.character(fet[[i]]$estimate),
CI_95_min  = as.character(fet[[i]]$conf.int[[1]]),
CI_95_max  = as.character(fet[[i]]$conf.int[[2]]),
Cases_with_ICD_code       = result[[i]][2],
Cases_without_ICD_code    = result[[i]][3],
Controls_with_ICD_code    = result[[i]][4],
Controls_without_ICD_code = result[[i]][5],
stringsAsFactors = FALSE)
}
fisherDF <- rbindlist(fisherDF)
nrow(fisherDF)
fisherDFord <- fisherDF[order(fisherDF$FDR), ]
head(fisherDFord)
getwd()
fisherDFord <- fisherDF[order(fisherDF$FDR), ]
head(fisherDFord)
save(result, fisherDF, file = "fisher_results.RData")
write.xlsx(fisherDFord, file = "fisher_results.xlsx", row.names = FALSE)
writeLines(capture.output(sessionInfo()), sessionInfoFile)
nrow(fisherDF)  # 47,574
# Author: Kenneth C. Smith
# Date: January 2, 2020
#
# Input: a file containing 4 columns:
#    unlabeled (row number)
#    "SUBJECT_ID"  such as "16214497"
#    "ICD_CODE" such as "367.4"
#    "Case_status" can be "1" (case), "0" (control), or "." (not specified)
#    In this version, we include rows with a case_status of "." as additional control samples
#    by changing their status to "0".
# Procedure: The input data file contains only observations which associate a subject with a given code.
#            Counts of subjects not having particular codes, and their case/control status,
#            are reconstructed from the available data by creating sets of all subjects,
#            their case/control status, and all codes.
#            After the complete contingency tables for each code are reconstructed, FET is run
#            followed by FDR/BH p-value correction.
#
# Output: The data is sorted by FDR and written out to an Excel file.
library(xlsx)
library(data.table)
inputData <- "//isilon.c2b2.columbia.edu/ifs/archive/shares/af_lab/Christiano/Lynn/2019/ICD_codes/data/ICD_code_subject_data.csv"
sessionInfoFile <- "icd_codes_fet_sessionInfo.txt"
df <- read.csv(inputData, stringsAsFactors = FALSE)
nrow(df)  # 30,632,375
colnames(df)  # [1] "X"           "SUBJECT_ID"  "ICD_CODE"    "Case_status"
one <- sum(df$Case_status == 1) # 368,229
zero <- sum(df$Case_status == 0) # 12,178,353
dot <- sum(df$Case_status == ".") # 18,085,793
df[df$Case_status == ".", "Case_status"] <- 0
# Just check reassignment went as expected
oneD <- sum(df$Case_status == 1) # 368,229
zeroD <- sum(df$Case_status == 0) # 30,264,146
dotD <- sum(df$Case_status == ".") # 0
zeroD == zero + dot  # TRUE
nrow(df)  # 30,632,375
df <- df[-1]
colnames(df)  # [1] "SUBJECT_ID"  "ICD_CODE"    "Case_status"
dup <- duplicated(df)
sum(dup) # 20,864,727
df <- df[!dup, ]
nrow(df) # 9,767,648
icdUniq <- unique(df$ICD_CODE)
length(icdUniq)  # 47,574
head(icdUniq)
subjUniq <- unique(df$SUBJECT_ID)
length(subjUniq)  # 102,880
subjStatus <- df[-2]
subjStatus <- unique(subjStatus)
nrow(subjStatus)
# Test that the number of unique combinations of subject + case/control status is the same as the number of unique subjects
# That is, each subject always has the same status
totalSubjects <- length(subjUniq)
nrow(subjStatus) == totalSubjects  # True
head(subjStatus)
s1 <- sum(subjStatus$Case_status == 1)  # 668
s2 <- sum(subjStatus$Case_status == 0)  # 102,212
s1 + s2 == nrow(subjStatus)  # Are all values 1 or 0?  Yes
getMatrix <- function(code) {
#code <- "S52.552A"  # for testing
w <- which(df[, "ICD_CODE"] == code)
N1 <- sum(df[w, "Case_status"] == 1)  # Case
N3 <- length(w) - N1                  # Control
noCode <- !(subjStatus$SUBJECT_ID %in% df[w, "SUBJECT_ID"])
N2 <- sum(subjStatus[noCode, "Case_status"] == 1)  # Case
N4 <- sum(noCode) - N2                             # Control
if (N1 + N2 + N3 + N4 != totalSubjects) {
stop(paste("At code ", code, ": sum of terms", N1+N2+N3+N4, "doesn't equal total", totalSubjects))
}
return(c(code, N1, N2, N3, N4))
}
result <- lapply(icdUniq[1:length(icdUniq)], getMatrix)
# result <- lapply("S52.552A", getMatrix)
runFisherExact <- function(counts) {
m <- matrix(as.integer(c(counts[2], counts[4], counts[3], counts[5])),
nrow = 2,
dimnames = list(c("case", "control"), c("code", "nocode")))
return(fisher.test(m))
}
fet <- lapply(result, runFisherExact)
# attr(fr[[i]]$conf.int, "conf.level")  # just for reference here.
# extract a vector of p-values
pv <- sapply(fet, function(x) x$p.value)
fdr <- p.adjust(pv, method = "fdr")
# because we are accessing both "result" and "fet", need to use index rather than apply()
fisherDF <- vector(mode = "list", length = length(fet))
for (i in 1:length(fet)) {
if(i %% 10000 == 0) print(i)
fisherDF[[i]] <-  data.frame(ICD_code   = result[[i]][1],
FET_pval   = fet[[i]]$p.value,
FDR        = fdr[i],
Odds_ratio = as.character(fet[[i]]$estimate),
CI_95_min  = as.character(fet[[i]]$conf.int[[1]]),
CI_95_max  = as.character(fet[[i]]$conf.int[[2]]),
Cases_with_ICD_code       = result[[i]][2],
Cases_without_ICD_code    = result[[i]][3],
Controls_with_ICD_code    = result[[i]][4],
Controls_without_ICD_code = result[[i]][5],
stringsAsFactors = FALSE)
}
fisherDF <- rbindlist(fisherDF)
nrow(fisherDF)  # 47,574
fisherDFord <- fisherDF[order(fisherDF$FDR), ]
head(fisherDFord)
save(result, fisherDF, file = "fisher_results.RData")
write.xlsx(fisherDFord, file = "fisher_results.xlsx", row.names = FALSE)
writeLines(capture.output(sessionInfo()), sessionInfoFile)
l.ex <- list(a = list(1:5, LETTERS[1:5]), b = "Z", c = NA)
writeUniqueList
l.ex
unlist(l.ex, recursive = FALSE)
unlist(l.ex, recursive = TRUE)
library(xlsx)
library(data.table)
inputData <- "//isilon.c2b2.columbia.edu/ifs/archive/shares/af_lab/Christiano/Lynn/2019/ICD_codes/data/ICD_code_subject_data.csv"
sessionInfoFile <- "icd_codes_fet_sessionInfo.txt"
df <- read.csv(inputData, stringsAsFactors = FALSE)
head(df)
df <- df[-1]  # Remove first columnn "X", which is just row number
colnames(df)  # [1] "SUBJECT_ID"  "ICD_CODE"    "Case_status"
one <- sum(df$Case_status == 1) # 368,229
zero <- sum(df$Case_status == 0) # 12,178,353
dot <- sum(df$Case_status == ".") # 18,085,793
df[df$Case_status == ".", "Case_status"] <- 0
# Just check reassignment went as expected
oneD <- sum(df$Case_status == 1) # 368,229
zeroD <- sum(df$Case_status == 0) # 30,264,146
dotD <- sum(df$Case_status == ".") # 0
zeroD == zero + dot  # TRUE
nrow(df)  # 30,632,375
dup <- duplicated(df)
sum(dup) # 20,864,727
head(df[dup,])
df <- df[!dup, ]  # remove exact duplicates
nrow(df) # 9,767,648
icdUniq <- unique(df$ICD_CODE)
length(icdUniq)  # 47,574
head(icdUniq)
subjUniq <- unique(df$SUBJECT_ID)
length(subjUniq)  # 102,880
subjStatus <- df[-2]  # remove ICD_CODE column
subjStatus <- unique(subjStatus)
nrow(subjStatus)
totalSubjects <- length(unique(df$SUBJECT_ID))
length(totalSubjects)  # 102,880
totalSubjects  # 102,880
# get unique combinations of subject_id and case_status
subjStatus <- df[-2]  # remove ICD_CODE column
subjStatus <- unique(subjStatus)
nrow(subjStatus)  # 102,880
# Test that the number of unique combinations of subject + case/control status is the same as the number of unique subjects
# That is, each subject always has the same status
nrow(subjStatus) == totalSubjects  # True
head(subjStatus)
install.packages("gmp")
# BiocManager::install("flowCore")
library(flowCore)
dataDir <- "isilon.c2b2.columbia.edu/ifs/home/shares/hipc/Sample_Profiling_Data/Pranay/Donor_flow_data/D251"
files <- list.files(path = dataDir, pattern = "*.fcs", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = TRUE, include.dirs = FALSE, no.. = FALSE)
files
files <- list.files(path = dataDir, pattern = ".fcs", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = TRUE, include.dirs = FALSE, no.. = FALSE)
files <- list.files(path = dataDir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = TRUE, include.dirs = FALSE, no.. = FALSE)
dataDir <- "//isilon.c2b2.columbia.edu/ifs/home/shares/hipc/Sample_Profiling_Data/Pranay/Donor_flow_data/D251"
files <- list.files(path = dataDir, pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = TRUE, include.dirs = FALSE, no.. = FALSE)
files <- list.files(path = dataDir, pattern = "*.fcs", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = TRUE, include.dirs = FALSE, no.. = FALSE)
read.FCSheader(files, path = ".", keyword = NULL, ...)
headers <- read.FCSheader(files, path = dataDir, keyword = NULL)
headers
headers$Specimen_001_251_BM_026.fcs
length(headers$Specimen_001_251_BM_026.fcs)
head(headers$Specimen_001_251_BM_026.fcs)
head(headers$Specimen_001_251_BM_026.fcs, 50)
headers <- read.FCSheader(files, path = dataDir, keyword = "EXPERIMENT NAME")
head(headers$Specimen_001_251_BM_026.fcs, 50)
headers
headers <- read.FCSheader(files, path = dataDir, keyword = NULL)
head(headers$Specimen_001_251_BM_026.fcs, 50)
head(headers$Specimen_001_251_BM_026.fcs, 100)
head(headers$Specimen_001_251_BM_026.fcs, 75)
head(headers$Specimen_001_251_BM_026.fcs, 50)
lapply(headers[[1]], function(x) print(x))
sapply(headers[[1]], function(x) print(x))
lapply(headers[[1]], function(x) print(x))
names(headers[[1]])
lapply(headers[[1]], function(x) print(x))
headers <- read.FCSheader(files, path = dataDir, keyword = c("EXPERIMENT NAME", "TUBE NAME", "$DATE", "$P18N", "$P18S", "$P19N", "$P19S", "$P20N", "$P20S"))
lapply(headers[[1]], function(x) print(x))
headers
names(headers[[1]])
headers[[1]]
lapply(headers[[1]], function(x) print(names(x)))
lapply(headers[[1]], function(x) print(x))
headersDF <- data.frame(headers)
headersDF
headersDF <- t(data.frame(headers))
headersDF
# dataDir <- "//isilon.c2b2.columbia.edu/ifs/home/shares/hipc/Sample_Profiling_Data/Pranay/Donor_flow_data/D251"
dataDir <- "//isilon.c2b2.columbia.edu/ifs/home/shares/hipc/Sample_Profiling_Data/Pranay/Donor_flow_data/D308"
files <- list.files(path = dataDir, pattern = "*.fcs", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = TRUE, include.dirs = FALSE, no.. = FALSE)
headers <- read.FCSheader(files, path = dataDir, keyword = c("EXPERIMENT NAME", "TUBE NAME", "$DATE", "$P18N", "$P18S", "$P19N", "$P19S", "$P20N", "$P20S"))
lapply(headers[[1]], function(x) print(x))
headersDF <- t(data.frame(headers))
headersDF
dataDir <- "//isilon.c2b2.columbia.edu/ifs/home/shares/hipc/Sample_Profiling_Data/Pranay/Donor_flow_data"
files <- list.files(path = dataDir, pattern = "*.fcs", all.files = FALSE,
full.names = FALSE, recursive = TRUE,
ignore.case = TRUE, include.dirs = FALSE, no.. = FALSE)
headers <- read.FCSheader(files, path = dataDir, keyword = NULL)
headers <- read.FCSheader(files, path = dataDir, keyword = c("EXPERIMENT NAME", "TUBE NAME", "$DATE", "$P18N", "$P18S", "$P19N", "$P19S", "$P20N", "$P20S"))
headersDF <- t(data.frame(headers))
head(headersDF, 100)
nrow(headersDF)
#head(headers$Specimen_001_251_BM_026.fcs, 50)
#lapply(headers[[1]], function(x) print(x))
getwd()
write.csv(headersDF, file = "pranayFCSHeaders.csv")
file <-  "/ifs/archive/shares/af_lab/GTEx/RDA_Files/All_62_ARACNE.rda"
something <- load(file = file)
file <- "W:/GTEx/RDA_Files/All_62_ARACNE.rda"
something <- load(file = file)
head(tcga_gbm)
class(tcga_gbm)
ls
tcga_gbm[[1]]
tcga_gbm$19
tcga_gbm$"19"
tcga_gbm$" 19"
tcga_gbm[1]
tcga_gmb[2]
tcga_gbm[2]
Sys.which("make")
packages()
install.packages(c("cachem", "gert", "ggplotify", "httpuv", "later", "matrixStats", "R6", "RCurl", "RSQLite", "scatterpie", "waldo", "XML"))
setwd("~/GitHub/hipc-dashboard-pipeline/R")
